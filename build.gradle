import java.text.SimpleDateFormat

plugins {
  id 'groovy'
  id 'java-library'
  id "io.morethan.jmhreport" version "0.9.0"
  id "idea"
  id 'maven-publish'
}


apply from: 'jmh.gradle'

group 'net.jnellis'
version '1.0'

repositories {
  mavenCentral()
}

compileJava {
  options.compilerArgs = ["-Xlint:unchecked",
                          "-Xlint:preview",
                          "-Xdiags:verbose",
                          "-Xlint:deprecation"]

  options.release = 8
}

idea {
  module {
    downloadJavadoc = true
  }
}

test {
  useJUnitPlatform()
}

dependencies {
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'org.codehaus.groovy:groovy-all:3.0.10'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

  testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
  testImplementation "org.spockframework:spock-core"

}

javadoc {
  options.addStringOption("Xwerror", "-Xdoclint:all")
}
check.dependsOn javadoc

java{
  withSourcesJar()
  withJavadocJar()
}

publishing{
  repositories{
    maven{
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/jnellis/interleave"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
    publications{
      myJava(MavenPublication){
        from components.java
      }
    }
  }
}

// jmhReport setting
def reportFile = file("$projectDir/docs/jmh/report.json")

jmh {
  include = ["A.*Bench"]
  iterations = 10
  warmupIterations = 10
  jmhVersion = '1.35'
  benchmarkMode = ['avgt']
  resultFormat = 'JSON'
  resultsFile = reportFile
//  profilers=['jfr']
  fork = 2
  timeUnit = 'ns'
  timeOnIteration = '50ms'
  warmup = '50ms'
  includeTests = false
//  jvmArgs = ['-Djmh.separateClasspathJAR']
//  benchmarkParameters = ['shiftAmt': [50001]]

//  verbosity = 'EXTRA'
//  help = true  // uncomment for jmh CLI help screen, then exit
//  list = true  // uncomment to list benchmarks that match filter, and exit
//  listp = true // uncomment to list benchmarks that match filter along with
  // their parameter list, then exit
//  lprof = true // uncomment to list available profilers, then exit
//  lrf = true   // uncomment to list available result formats, then exit
}

jmhReport {
  def dateStr = new SimpleDateFormat("yy_MM_dd/HH_mm").format(new Date())
  jmhResultPath = reportFile
  jmhReportOutput = file("$projectDir/docs/jmh/$dateStr")
}
tasks.jmhReport.doFirst { mkdir(jmhReport.jmhReportOutput) }

tasks.jmh.finalizedBy tasks.jmhReport
