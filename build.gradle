plugins {
  id 'groovy'
  id 'java-library'
  id "io.morethan.jmhreport" version "0.9.0"  
}

sourceSets {
  java17 {
    java {
      srcDirs = ['src/main/java17/']
    }
  }
  java17Test {
    java {
      srcDirs = ['src/test/java17/']
    }
  }
}

apply from: 'jmh.gradle'

group 'net.jnellis'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

compileJava {
  options.compilerArgs = ["-Xlint:unchecked",
                          "-Xlint:preview",
                          "-Xdiags:verbose",
                          "-Xlint:deprecation"]

  options.release = 8
}

compileJava17Java {
  options.release = 17
}
compileJava17TestJava {
  options.release = 17
}


dependencies {
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'org.codehaus.groovy:groovy-all:3.0.10'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

  java17Implementation files(sourceSets.main.output.classesDirs) {
    builtBy compileJava
  }

  java17TestImplementation files(sourceSets.java17.output.classesDirs,
      sourceSets.main.output.classesDirs,
      sourceSets.test.output.classesDirs)

  java17TestImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  java17TestImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
  java17TestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'


}

jar {
  into('META-INF/versions/17') {
    from sourceSets.java17.output
  }
  manifest {
    attributes("Manifest-Version": "1.0",
        "Multi-Release": true)
  }
}


tasks.register('testJava17', Test) {
  description = 'Tests java17 specific code'
  group = 'verification'
  testClassesDirs = sourceSets.java17Test.output.classesDirs  
  classpath = sourceSets.java17Test.runtimeClasspath
  it.shouldRunAfter test
  useJUnitPlatform()
}

tasks.withType(Test).configureEach{
  useJUnitPlatform()
  reports.html.required = true
}

task testReport(type:TestReport){
  destinationDir = file("$buildDir/reports/tests/ztest")
  def tests = tasks.withType(Test)
  println tests
  reportOn tests
}

tasks.test.finalizedBy testJava17
tasks.testJava17.finalizedBy testReport

java {
  toolchain{
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ORACLE
  }
}


// jmhReport setting
def reportFile = file("$projectDir/docs/jmh/report.json")

jmh {
  include = [".*Bench"]
  iterations = 15
  warmupIterations = 5
  jmhVersion = '1.35'
  benchmarkMode = ['avgt']
  resultFormat = 'JSON'
  resultsFile = reportFile
//  profilers=['hs_rt']
  fork = 3
  timeUnit = 'ns'
  timeOnIteration = '1s'
  warmup = '1s'
  includeTests = false
//  jvmArgs = ['-Djmh.separateClasspathJAR']
//  benchmarkParameters = ['maxPieceSize':[20,50,100],'BINS':[50,100]]

//  verbosity = 'EXTRA'
//  help = true  // uncomment for jmh CLI help screen, then exit
//  list = true  // uncomment to list benchmarks that match filter, and exit
//  listp = true // uncomment to list benchmarks that match filter along with
  // their parameter list, then exit
//  lprof = true // uncomment to list available profilers, then exit
//  lrf = true   // uncomment to list available result formats, then exit
}

jmhReport {
  jmhResultPath = reportFile
  jmhReportOutput = file("$projectDir/docs/jmh/1")
}

tasks.jmh.finalizedBy tasks.jmhReport
