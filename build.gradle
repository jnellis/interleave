import java.text.SimpleDateFormat

plugins {
  id 'groovy'
  id 'java-library'
  id "io.morethan.jmhreport" version "0.9.0"
  id "idea"
  id 'maven-publish'
  id 'signing'
}


apply from: 'jmh.gradle'

group 'net.jnellis'
version '1.0.1'

repositories {
  mavenCentral()
}

compileJava {
  options.compilerArgs = ["-Xlint:unchecked",
                          "-Xlint:preview",
                          "-Xdiags:verbose",
                          "-Xlint:deprecation"]

//  options.release = 8
}

idea {
  module {
    downloadJavadoc = true
  }
}

test {
  useJUnitPlatform()

  // set heap size for the test JVM(s)
  minHeapSize = "4G"
  maxHeapSize = "8G"

  // set JVM arguments for the test JVM(s)
  jvmArgs '-XX:MaxMetaspaceSize=512M'
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

  testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
  testImplementation "org.spockframework:spock-core"

}

javadoc {
  options.addStringOption("Xwerror", "-Xdoclint:all")
}
check.dependsOn javadoc

java{
  withSourcesJar()
  withJavadocJar()
}

publishing{
  repositories{
    maven{
      name = "OSSRH"
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials{
        username = System.getenv("MAVEN_USERNAME")
        password = System.getenv("MAVEN_PASSWORD")
//        username = MAVEN_USERNAME
//        password = MAVEN_PASSWORD
      }
    }
    maven{
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/jnellis/interleave"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
    publications{
      mavenJava(MavenPublication){
        from components.java
        pom {
          name = "interleave"
          packaging = "jar"
          description = "Interleave (faro shuffle) one collection with itself or two collections with each other."
          url = "https://github.com/jnellis/interleave"
          scm {
            url = "https://github.com/jnellis/interleave.git"
          }
          licenses{
            license{
              name = "Creative Commons Zero v1.0 Universal"
              url = "https://creativecommons.org/publicdomain/zero/1.0/"
            }
          }
          developers{
            developer{
              id = 'jnellis'
              name = 'Joseph Nellis'
              email = 'dev@jnellis.net'
            }
          }

        }
      }
    }
  }
}

signing{
  sign publishing.publications.mavenJava
}


// jmhReport setting
def reportFile = file("$projectDir/docs/jmh/report.json")

jmh {
  include = ["recursiveTwoArrayInShuffle"]
  iterations = 10
  warmupIterations = 10
  jmhVersion = '1.36'
  benchmarkMode = ['avgt']
  resultFormat = 'JSON'
  resultsFile = reportFile
  profilers=['jfr']
  fork = 2
  timeUnit = 'us'
  timeOnIteration = '1s'
  warmup = '1s'
  includeTests = false
  jvmArgs = ['-XX:MaxMetaspaceSize=512M -Xms8G -Xmx8G',
             "-server",
             "-XX:+UnlockDiagnosticVMOptions",
//             "-XX:+PrintCompilation",
             "-XX:PrintAssemblyOptions=intel",
//             "-XX:CompileCommand=print,*Util.fastmod*"
//             "-XX:+UseLargePages",
             "-Xlog:gc+init"
  ]
  benchmarkParameters = ['max': [1_000]]

//  verbosity = 'EXTRA'
//  help = true  // uncomment for jmh CLI help screen, then exit
//  list = true  // uncomment to list benchmarks that match filter, and exit
//  listp = true // uncomment to list benchmarks that match filter along with
  // their parameter list, then exit
//  lprof = true // uncomment to list available profilers, then exit
//  lrf = true   // uncomment to list available result formats, then exit
}


jmhReport {
  def dateStr = new SimpleDateFormat("yy_MM_dd/HH_mm").format(new Date())
  jmhResultPath = reportFile
  jmhReportOutput = file("$projectDir/docs/jmh/$dateStr")
}
tasks.jmhReport.doFirst { mkdir(jmhReport.jmhReportOutput) }


tasks.register('clearJmhTmpDir',Delete) {
  delete file("$buildDir/tmp/jmh").listFiles()
}

tasks.register('moveProfileResultsToJmhReportFolder', Copy) {
  from "$buildDir/tmp/jmh"
  include "**/profile.jfr"
  into jmhReport.jmhReportOutput
}

tasks.jmh.dependsOn clearJmhTmpDir
tasks.jmh.finalizedBy tasks.jmhReport
tasks.jmhReport.finalizedBy moveProfileResultsToJmhReportFolder